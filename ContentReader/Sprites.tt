<#@ include file="MultiOutput.tt" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
    string contentLocation = Path.GetDirectoryName(Host.TemplateFile) + "/../GameTest/Content";
    DirectoryInfo d = new DirectoryInfo(contentLocation);
    List<string> fileNames = new List<string>();

    foreach(FileInfo file in d.GetFiles("*.txt"))
    {
        ReadFile(file.Name, contentLocation);
    }

    DeleteOldOutputs();
#>
<#+
    void ReadFile(string fileName, string contentLocation)
    {
        string line;
        string spriteName;
        List<string> spriteNames = new List<string>();
        List<string> animationNames = new List<string>();

        try
        {
            using (System.IO.StreamReader file = new System.IO.StreamReader(contentLocation + "/" + fileName))
            {
                file.ReadLine();
                while ((line = file.ReadLine()) != null)
                {
                    spriteName = ReadLine(line);
                    spriteNames.Add(spriteName);
                    if(spriteName[spriteName.Length - 1] == '1')
                    {
                        animationNames.Add(spriteName.Substring(0, spriteName.Length - 1));
                    }
                }
            }
        }
        catch{}

        GenerateFile(Path.GetFileNameWithoutExtension(fileName), spriteNames.ToArray(), animationNames.ToArray());
        SaveOutput(Path.GetFileNameWithoutExtension(fileName) + ".cs");
    }

    string ReadLine(string fileLine)
    {
        string[] line = fileLine.Split(' ');
        return line[line.Length - 1];
    }

    void GenerateFile(string tileset, string[] spriteNames, string[] animationNames)
    {
#>
/*This is an autogenerated file for tileset <#= tileset #>*/
using CommonLib.Common;
using System.Collections.Generic;

namespace ContentReader.Tilesets
{
    public static class <#= tileset #>
    {
<#+  
        foreach(string spriteName in spriteNames)
        {
#>
        public static TileInfo <#= spriteName #>
        {
            get
            {
                return TilesetReader.GetSprite("<#= tileset #>", "<#= spriteName #>");
            }
        }

<#+ 
        }

        foreach(string animationName in animationNames)
        {
#>
        public static List<TileInfo> <#= animationName + "Anim" #>
        {
            get
            {
                return TilesetReader.GetAnimation("<#= tileset #>", "<#= animationName #>");
            }
        }

<#+
        }
#>
        public static Dictionary<string, TileInfo> Tileset
        {
            get
            {
                return TilesetReader.GetSprites("<#= tileset #>");
            }
        }
    }
}
<#+
    }
#>